{
  "version": 3,
  "sources": ["../../src/template/template_manager.ts"],
  "sourcesContent": ["import { SamartHomeHandyBis } from \"../main\";\n\nexport class TemplateManager {\n    adapter: SamartHomeHandyBis;\n    constructor(adapter: SamartHomeHandyBis) {\n        this.adapter = adapter;\n    }\n\n    public async uploadTemplateSetting(\n        name: string,\n        devices: string,\n        screens: string,\n        widgets: string,\n        /* _client: Client, */\n    ): Promise<void> {\n        if (devices != null) {\n            await this.adapter.setStateAsync(\"settings.\" + name + \".devices\", devices, true);\n        }\n        if (screens != null) {\n            await this.adapter.setStateAsync(\"settings.\" + name + \".screens\", screens, true);\n        }\n        if (widgets != null) {\n            await this.adapter.setStateAsync(\"settings.\" + name + \".widgets\", widgets, true);\n        }\n    }\n\n    public async getTemplateSettings(\n        name: string,\n    ): Promise<{ screens: any; widgets: any; devices: any } | { [index: string]: never }> {\n        let temp = await this.adapter.getStateAsync(\"settings.\" + name + \".devices\");\n        if (temp == null) {\n            return {};\n        }\n        const devicesJSON = temp.val;\n        temp = await this.adapter.getStateAsync(\"settings.\" + name + \".screens\");\n        if (temp == null) {\n            return {};\n        }\n        const screensJSON = temp.val;\n        temp = await this.adapter.getStateAsync(\"settings.\" + name + \".widgets\");\n        if (temp == null) {\n            return {};\n        }\n        const widgetsJSON = temp.val;\n\n        this.adapter.log.debug(\"WIDGETS \" + widgetsJSON);\n\n        return { screens: screensJSON, widgets: widgetsJSON, devices: devicesJSON };\n    }\n\n    public async fetchTemplateSettings(): Promise<string[]> {\n        const settings = await this.adapter.getAdapterObjectsAsync();\n        this.adapter.log.debug(\"Fetch Templates\");\n        const list = [];\n        for (const id in settings) {\n            const splitted = id.split(\".\");\n            if (splitted[3] == null || splitted[2] != \"settings\" || splitted.length > 4) continue;\n            this.adapter.log.debug(\"Settings: \" + id);\n            list.push(splitted[3]);\n        }\n\n        return list;\n    }\n\n    public async createNewTemplateSetting(templateSettings: TemplateSettings): Promise<void> {\n        await this.adapter.setObjectNotExistsAsync(\"settings\", {\n            type: \"channel\",\n            common: {\n                name: \"Settings\",\n            },\n            native: {},\n        });\n        await this.adapter.setObjectNotExistsAsync(\"settings.\" + templateSettings.name, {\n            type: \"folder\",\n            common: {\n                name: templateSettings.name,\n                read: true,\n                write: true,\n            },\n            native: {},\n        });\n\n        await this.adapter.setObjectNotExistsAsync(\"settings.\" + templateSettings.name + \".devices\", {\n            type: \"state\",\n            common: {\n                name: templateSettings.name + \" devices\",\n                type: \"string\",\n                role: \"json\",\n                def: \"{}\",\n                read: true,\n                write: true,\n            },\n            native: {},\n        });\n\n        await this.adapter.setObjectNotExistsAsync(\"settings.\" + templateSettings.name + \".widgets\", {\n            type: \"state\",\n            common: {\n                name: templateSettings.name + \" widgets\",\n                type: \"string\",\n                role: \"json\",\n                def: \"{}\",\n                read: true,\n                write: true,\n            },\n            native: {},\n        });\n\n        await this.adapter.setObjectNotExistsAsync(\"settings.\" + templateSettings.name + \".screens\", {\n            type: \"state\",\n            common: {\n                name: templateSettings.name + \" screens\",\n                type: \"string\",\n                role: \"json\",\n                def: \"{}\",\n                read: true,\n                write: true,\n            },\n            native: {},\n        });\n    }\n}\n\nexport class TemplateSettings {\n    name;\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
