{
  "version": 3,
  "sources": ["../../src/server/client.ts"],
  "sourcesContent": ["import { IncomingMessage } from \"http\";\nimport { WebSocket } from \"ws\";\nimport { SamartHomeHandyBis } from \"../main\";\nimport { Server } from \"./server\";\nimport {\n    EnumUpdatePack,\n    EnumUpdateRequestPack,\n    GetTemplateSettingPack,\n    RequestLoginPacket,\n    StateChangeRequestPack,\n    SubscribeToDataPointsPack,\n    TemplateSettingCreatePack,\n    TemplateSettingUploadPack,\n    TemplateSettingUploadSuccessPack,\n    TemplateSettingsRequestedPack,\n    NotificationPack,\n    DataPack,\n} from \"./datapacks\";\nimport { TemplateSettings } from \"../template/template_manager\";\nimport * as CryptoJS from \"crypto-js\";\nimport { Mutex } from \"async-mutex\";\n\nexport class Client {\n    socket;\n    server;\n    isConnected;\n    req;\n    adapter : SamartHomeHandyBis;\n    approved;\n    aesKey?: string;\n    onlySendNotification: boolean = false;\n    id?: string;\n    name?: string;\n    messageHistoryMutex = new Mutex();\n    messageHistory: any[] = [];\n    constructor(socket: WebSocket, server: Server, req: IncomingMessage, adapter: SamartHomeHandyBis) {\n        this.socket = socket;\n        this.server = server;\n        this.req = req;\n        this.isConnected = true;\n        this.adapter = adapter;\n        this.approved = false;\n        this.aesKey = \"\";\n        this.onlySendNotification = false;\n        socket.on(\"message\", this.onData.bind(this));\n        socket.on(\"close\", this.onEnd.bind(this));\n        socket.onclose = this.onEnd.bind(this);\n        socket.onerror = this.onError.bind(this);\n        socket.on(\"pong\", () => {\n            this.adapter.server?.clientMutex.runExclusive(() => {\n                const c = this.adapter.server?.conClients.find(e => e.client.id == this.id);\n                if(c) {\n                    this.adapter.log.debug(\"PONG\");\n                    c.lastPong = true;\n                }\n                this.messageHistoryMutex.runExclusive(() => {\n                    this.messageHistory = [];\n                })\n            })\n        });\n    }\n\n    close(): void {\n        this.socket.pause();\n    }\n\n    async sendMSG(msg: any, needAproval: boolean = false, log : boolean = true, backlog: boolean = false): Promise<boolean> {\n        if (needAproval && !this.approved) {\n            if(log) {\n                this.adapter.log.debug(\"The Client was not approved to get a msg (\" + msg + +\") \" + needAproval);\n            }\n            return false;\n        }\n        if (msg[\"type\"] === \"loginKey\") {\n            this.adapter.log.debug(\"Send MSG( LoginKey ) to Client(\" + this.toString() + \")\");\n        } else {\n            this.adapter.log.debug(\"Send MSG( \" + JSON.stringify(msg) + \") to Client(\" + this.toString() + \")\");\n        }\n        const send = {\n            type: msg[\"type\"],\n            content: \"\",\n        };\n        if (\n            this.aesKey != \"\" &&\n            Object.keys(msg).length > 1 &&\n            (await this.adapter.getStateAsync(\"devices.\" + this.id + \".aesKey_active\"))?.val\n        ) {\n            const aes = `${this.aesKey}${msg[\"type\"]}`;\n            send[\"content\"] = CryptoJS.AES.encrypt(JSON.stringify(msg), aes).toString();\n        } else {\n            send[\"content\"] = msg;\n        }\n        if(backlog) {\n            this.messageHistoryMutex.runExclusive(() => {\n                this.messageHistory.push(msg);\n            });\n        }\n\n        this.socket.send(JSON.stringify(send).toString(), (err) => {\n        });\n        return false;\n    }\n\n    setAESKey(aesKey: string): void {\n        this.aesKey = aesKey;\n    }\n\n    setID(id: string): void {\n        this.id = id;\n    }\n\n    onData(data: string): void {\n        try {\n            const map = JSON.parse(data);\n            if (map && map[\"content\"] != null && typeof map[\"content\"] === \"string\") {\n                if (this.aesKey != \"\" || map[\"type\"] === \"requestLogin\") {\n                    let aes = \"\";\n                    if (map[\"type\"] === \"requestLogin\") {\n                        aes = `tH8Lm-${map[\"type\"]}`; // Dummy Key\n                    } else {\n                        aes = `${this.aesKey}${map[\"type\"]}`;\n                    }\n                    try {\n                        const bytes = CryptoJS.AES.decrypt(map[\"content\"], aes);\n                        map[\"content\"] = JSON.parse(bytes.toString(CryptoJS.enc.Utf8)) ?? {};\n                    } catch (error) {\n                        this.onWrongAesKey();\n                        this.adapter.log.warn(`Wrong AES Key - ${error}`);\n                        return;\n                    }\n                } else {\n                    if (this.aesKey == \"\" && map[\"type\"] != \"requestLogin\") {\n                        this.adapter.log.warn(`Please enabled AES encryption`);\n                        this.onWrongAesKey();\n                        return;\n                    }\n                }\n            }\n            const content = map[\"content\"] ?? {};\n            if (map[\"type\"] === \"requestLogin\") {\n                this.adapter.log.debug(\"Client(\" + this.toString() + \") send requestLogin\");\n            } else {\n                this.adapter.log.debug(\"Client(\" + this.toString() + \") sended msg: \" + data + \" type: \" + map[\"type\"]);\n            }\n            switch (map[\"type\"]) {\n                case \"iobStateChangeRequest\":\n                    if (this.approved)\n                        this.onStateChangeRequest(new StateChangeRequestPack(content[\"stateID\"], content[\"value\"]));\n                    break;\n                case \"enumUpdateRequest\": //Enum update Request\n                    if (this.approved) this.onEnumUpdateRequest(new EnumUpdateRequestPack(content[\"id\"]));\n                    break;\n                case \"subscribeToDataPoints\":\n                    if (this.approved)\n                        this.onSubscribeToDataPoints(new SubscribeToDataPointsPack(content[\"dataPoints\"]));\n                    break;\n                case \"subscribeHistory\":\n                    if (this.approved)\n                        /* this.onSubscribeToHistory(new SubscribeToDataPointsHistory(content[\"dataPoint\"], content[\"end\"], content[\"start\"], content[\"interval\"])); */\n                    //TODO:\n                    break;\n                case \"requestLogin\":\n                    if (!content[\"version\"] && content[\"deviceName\"]) {\n                        //TODO: Send info to APP\n                        this.adapter.log.warn(`Please update the HioB APP! [${content[\"version\"]}]`);\n                        return;\n                    }\n                    if(content[\"deviceName\"]) {\n                        this.onLoginRequest(new RequestLoginPacket(content[\"deviceName\"], content[\"deviceID\"], content[\"key\"], content[\"version\"], content[\"user\"], content[\"password\"]));\n                    }\n                    break;\n                case \"templateSettingCreate\":\n                    this.adapter.log.debug(JSON.stringify(content[\"name\"]));\n                    this.onTemplateSettingCreate(new TemplateSettingCreatePack(content[\"name\"]));\n                    break;\n                case \"requestTemplatesSettings\":\n                    this.adapter.log.debug(\"requestTemplatesSettings\");\n                    this.onTemplateSettingsRequest();\n                    break;\n                case \"uploadTemplateSetting\":\n                    this.adapter.log.debug(\"uploadTemplateSetting\");\n                    this.onTemplateUpload(new TemplateSettingUploadPack(content[\"name\"], content[\"devices\"], content[\"screens\"], content[\"widgets\"]));\n                    break;\n                case \"getTemplatesSetting\":\n                    this.adapter.log.debug(\"getTemplatesSetting\");\n                    this.getTemplatesSetting(content[\"name\"], content[\"device\"], content[\"screen\"], content[\"widget\"]);\n                    break;\n                case \"notification\":\n                    this.onNotification(new NotificationPack(content[\"onlySendNotification\"], content[\"content\"], content[\"date\"]));\n                    break;\n            }\n        } catch (e) {\n            if (e instanceof SyntaxError) {\n                this.adapter.log.error(\"There is something wrong with the sent data: No valid JSON Format\");\n            }\n        }\n    }\n\n    onApprove(): void {\n        this.approved = true;\n        this.adapter.notificationManager.sendBacklog(this);\n        this.adapter.server?.sendBacklog(this);\n    }\n\n    filter(value: { client: Client }): boolean {\n        return value.client.isConnected == true;\n    }\n\n    onEnd(): void {\n        this.isConnected = false;\n        this.setConnection();\n        this.adapter.log.debug(\"Closed connection to Client(\" + this.toString() + \")\");\n   \n    }\n\n    onError(): void {\n        this.isConnected = false;\n        this.setConnection();\n        this.adapter.log.debug(\"Closed connection to Client(\" + this.toString() + \")\");\n    }\n\n    setConnection(): void {\n        //TODO\n        // this.adapter.loginManager.pendingClients = this.adapter.loginManager.pendingClients.filter((e) => e.deviceID != this.deviceID);\n        // this.adapter.loginManager.loginedClients = this.adapter.loginManager.loginedClients.filter((e) => e.deviceID != this.deviceID);\n        this.adapter.setState(\"devices.\" + this.id + \".connected\", this.isConnected, true);\n    }\n\n    onStateChangeRequest(request: StateChangeRequestPack): void {\n        //Catch missing alias objects\n        try {\n            this.adapter.setForeignState(request.objectID, request.newValue, false);\n        } catch (e) {\n            this.adapter.log.warn(`The data point ${request.objectID} does not exist! ${e}`);\n        }\n    }\n\n    async onEnumUpdateRequest(request: EnumUpdateRequestPack): Promise<void> {\n        const result = await this.adapter.getEnumListJSON(request.id);\n        this.sendMSG(new EnumUpdatePack(request.id, result).toJSON(), true);\n    }\n\n    onSubscribeToDataPoints(sub: SubscribeToDataPointsPack): void {\n        this.adapter.subscribeToDataPoints(sub.dataPoints, this);\n    }\n\n    /* onSubscribeToHistory(sub: SubscribeToDataPointsHistory): void {\n        // this.adapter.historyManager.subscribeToHistory(sub.dataPoint, sub.start, sub.end, this, sub.minInterval);\n    } */\n\n    onLoginRequest(requestLoginPacket: RequestLoginPacket): void {\n        this.adapter.loginManager.onLoginRequest(this, requestLoginPacket).then(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            (_) => {\n                this.setConnection();\n            }\n        );\n    }\n\n    onWrongAesKey(): void {\n        this.adapter.loginManager.onWrongAesKey(this);\n    }\n\n    async onTemplateSettingsRequest(): Promise<void> {\n        const list = await this.adapter.templateManager.fetchTemplateSettings();\n        this.sendMSG(new TemplateSettingsRequestedPack(list).toJSON(), true);\n    }\n\n    async onTemplateSettingCreate(templateSettingCreatePack: TemplateSettingCreatePack): Promise<void> {\n        //TODO:\n        this.adapter.log.debug(\"OnTemplateSettingCreate: \" + templateSettingCreatePack.name);\n        await this.adapter.templateManager.createNewTemplateSetting(new TemplateSettings(templateSettingCreatePack.name));\n        this.sendMSG(new TemplateSettingCreatePack(templateSettingCreatePack.name).toJSON(), true);\n    }\n\n    async onTemplateUpload(uploadTemplateSettingPack: any): Promise<void> {\n        await this.adapter.templateManager.uploadTemplateSetting(uploadTemplateSettingPack.name, uploadTemplateSettingPack.devices, uploadTemplateSettingPack.screens, uploadTemplateSettingPack.widgets);\n        this.sendMSG(new TemplateSettingUploadSuccessPack().toJSON(), true);\n    }\n\n    async getTemplatesSetting(name: any, device: any, screen: any, widget: any): Promise<void> {\n        this.adapter.log.debug(\"NAME: \" + name);\n        const map = await this.adapter.templateManager.getTemplateSettings(name);\n        this.sendMSG(new GetTemplateSettingPack(device ? map[\"devices\"]: null, screen ? map[\"screens\"]: null, widget ? map[\"widgets\"] : null).toJSON(), true);\n\n    }\n\n    onNotification(pack: NotificationPack): any {\n        if (pack.onlySendNotification != undefined) {\n            this.onlySendNotification = pack.onlySendNotification;\n        }\n    }\n\n    toString(): string {\n        return JSON.stringify(this.req.socket.address()) + \":\" + this.req.socket.remotePort + \" id: \" + this.id;\n    }\n}\n"],
  "mappings": "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",
  "names": ["_a"]
}
